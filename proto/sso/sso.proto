syntax = "proto3"; // Версия используемого protobuf

package auth;

option go_package = "maksim.sso.v1;ssov1"; // Для генерации кода

// Описываем сервис Auth
service Auth {
  rpc Register (RegisterRequest) returns (RegisterResponse); // Метод для регистрации
  rpc Login (LoginRequest) returns (LoginResponse); // Метод для входа
  rpc IsAdimn (IsAdminRequest) returns (IsAdminResponse); // Метод для проверки на админа
}

// Параметры для запроса на регистрацию
message RegisterRequest {
  string email = 1;
  string password = 2;
}

// Параметры для ответа на регистрацию
message RegisterResponse {
  int64 user_id = 1;
}

// Параметры для запроса на вход
message LoginRequest {
  string email = 1;
  string password = 2;
  int32 app_id = 3; // id приложения куда логинится пользователь
}

// Параметры для ответа на вход
message LoginResponse {
  string token = 1;
}

message IsAdminRequest {
  int64 user_id = 1; // Пользователь которого мы хотим проверить

}

message IsAdminResponse {
  bool is_admin = 1; // Булевое значение, которое говорит является ли пользователь админом
}


// чтобы сгенерировать файлы на Go

//protoc
//-I proto // Указываем папку, в которой будут лежать все протофалы (общую папку)
//proto/sso/sso.proto // Путь до файла который хотим скомпилировать в GO
//--go_out=./gen/go // Куда будут сохраняться сгенерированные файлы
//--go_opt=paths=source_relative // Говорит, что сгенерированные файлы будут использовать тот же пакет, что и прото файлы
//--go-grpc_out=./gen/go // Куда складывать сгенерированный go grpc код
//--go-grpc_opt=paths=source_relative // Говорит, что сгенерированные файлы будут использовать тот же пакет, что и прото файлы
//

// чтобы подключить в нашем проекте (sso) протофайлы:
// go get (ссылка данного проекта proto на гитхаб)
// go get github.com/Maksim-512/protos
